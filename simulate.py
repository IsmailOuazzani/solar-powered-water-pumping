"""
For all the variables, we use the following units (unless explicitely stated):
Volume: mÂ³
Energy: Watt
Temperature: Celsius (unfortunate choice due to pvlib)
"""
from data import import_merra2_dataset, DATASETS
from geography import mask_lon_lat, plot_heatmap
from pvsystem import make_pv_system
import pvlib
import pandas as pd
from tqdm import tqdm

import logging
import numpy as np
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

if __name__ == "__main__":
    solar_radiation_ds = import_merra2_dataset(
        DATASETS["M2T1NXRAD_5-2023_only_SWGDN"], variables=["SWGDN"])
    
    lon = solar_radiation_ds['lon'].values  # Replace 'lon' with your longitude coordinate name
    lat = solar_radiation_ds['lat'].values  # Replace 'lat' with your latitude coordinate name


    lon_lat_pairs = mask_lon_lat(lon,lat)
    logging.info(f"Masked {100*(1-len(lon_lat_pairs)/(len(lon)*len(lat)))}% of data points.")

    pv_sim_results = []
    for longitude, latitude in tqdm(lon_lat_pairs):
        logging.info(f"Simulating system at {longitude}, {latitude}...")
        location_radiation_ds = solar_radiation_ds.sel(lat=latitude, lon=longitude, method=None)

        pv_system = make_pv_system(latitude=latitude, longitude=longitude)
        weather = location_radiation_ds.to_dataframe()
        weather = weather.rename(columns={"SWGDN": "ghi"}) # for compatibility with pvlib
        solar_position = pvlib.solarposition.get_solarposition(location_radiation_ds.time, latitude, longitude)
        weather["dni"] = pvlib.irradiance.disc(ghi=weather.ghi, solar_zenith=solar_position.zenith, datetime_or_doy=weather.index)["dni"] #TODO: try other models for dni
        weather["dhi"] =  - np.cos(np.radians(solar_position.zenith)) * weather.dni + weather.ghi # GHI = DHI + DNI * cos(zenith) https://www.researchgate.net/figure/Equation-of-calculating-GHI-using-DNI-and-DHI_fig1_362326479#:~:text=The%20quantity%20of%20solar%20radiation,)%20%2BDHI%20%5B12%5D%20.

        sim_out = pv_system.run_model(weather).results
        results = pd.DataFrame({"power":sim_out.ac})
        # clip the power to zero, as negative power does not make sense?
        results.power = results.power.clip(lower=0)
        results.power = results.power.fillna(0) # Don't need to do this when using other solar panels ...
        pv_sim_results.append(results.power.sum())


    plot_heatmap(lon_lat_pairs=lon_lat_pairs, values=np.array(pv_sim_results), output_file="outputs/total_power.png", legend="Total power generated by the pv system (W)")
    exit()
    
    